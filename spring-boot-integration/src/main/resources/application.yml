server: 
  port: 8085

spring:


  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    username: root
    password: root123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/batch?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
    schema:
    - classpath:/org/springframework/batch/core/schema-mysql.sql
    druid:

# 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 最小连接池数量
      min-idle: 5
      # 最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 用来检测连接是否有效的sql，要求是一个查询语句
      validation-query: SELECT 1 FROM DUAL
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true
      max-pool-prepared-statement-per-connection-size: 20
      #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 配置监控服务器
      #stat-view-servlet:
        #login-username: admin
        #login-password: 123456
        #reset-enable: false
        #url-pattern: /druid/*
        # 添加IP白名单
        #allow:
        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高
        #deny:
      #web-stat-filter:
        # 添加过滤规则
        #url-pattern: /*
        # 忽略过滤格式
        #exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"

  #batch配置
  batch:
    initialize-schema: always
    job:
      enabled: false
      
  kafka:
    bootstrap-servers:
    - 106.54.92.189:9092
  
    consumer:
      group-id: siTestGroup
      auto-offset-reset: earliest
      enable-auto-commit: false
      value-deserializer: com.cloud.spring.integration.deserializer.CustomDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer

    producer:
      batch-size: 16384
      buffer-memory: 33554432
      retries: 0
      value-serializer: com.cloud.spring.integration.serializer.CustomSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
  redis:
    host: 106.54.92.189
    port: 6379
    password: redis123456
    database: 0   
      
kafka:    
  return-topic: si.rTopic
  receive-topic: si.sTopic
  messageKey: si.key